{"version":3,"sources":["serviceWorker.js","redux/actions.js","components/Login.js","components/ChatMessage.js","components/Header.js","components/Chat.js","components/NotFound.js","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["Boolean","window","location","hostname","match","LOGIN_USER","LOGOUT_USER","ADD_MESSAGE","Login","props","onLogin","history","push","loginUser","state","userName","onUserNameChange","event","setState","target","value","className","type","placeholder","this","onChange","onClick","React","Component","connect","dispatch","ChatMessage","message","loggedInUser","user","Header","isLogin","onLogout","CHAT_API","Chat","onMessageChange","e","text","handleKeyPress","key","onSend","length","sendMessage","connection","send","received","onLogoutUser","scrollToBottom","messagesEndRef","current","scrollIntoView","behavior","WebSocket","createRef","onmessage","evt","data","messages","Fragment","map","index","ref","onKeyPress","addMessage","NotFound","App","exact","path","component","initState","reducer","action","Object","assign","store","createStore","setupReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0536b5bd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const LOGIN_USER = \"LOGIN_USER\";\nconst LOGOUT_USER = \"LOGOUT_USER\";\nconst ADD_MESSAGE = \"ADD_MESSAGE\";\n\nfunction loginUser (userName) {\n    return {\n        type: LOGIN_USER,\n        userName\n    };\n}\n\nfunction logoutUser () {\n    return {\n        type: LOGOUT_USER\n    };\n}\n\nfunction addMessage (message) {\n    return {\n        type: ADD_MESSAGE,\n        message\n    }\n}\n\nexport {\n    LOGIN_USER,\n    LOGOUT_USER,\n    ADD_MESSAGE,\n\n    loginUser,\n    logoutUser,\n    addMessage\n};","import React from 'react';\nimport { connect } from  'react-redux';\n\nimport { loginUser } from '../redux/actions';\n\nclass Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            userName: \"\"\n        }\n    }\n\n    onLogin = () => {\n        this.props.history.push('/chat');\n        this.props.loginUser(this.state.userName);\n    }\n\n    onUserNameChange = event => {\n        this.setState({\n            userName: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"login-page\">\n                <div className=\"login-form\">\n                    <h1>Login</h1>\n                    <input type=\"email\" placeholder=\"Username\" value={this.state.userName} className=\"text-input\" onChange={this.onUserNameChange}/>\n                    <input type=\"password\" placeholder=\"Password\" className=\"text-input\"/>\n                    <button className=\"login-button\" onClick ={this.onLogin}>Login</button>\n                    <div className=\"login-buttons\">\n                        <button className=\"login-button signup-button\">Forgot password?</button>\n                        <button className=\"login-button signup-button\">Create Account</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        \n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loginUser(userName) {\n            dispatch(loginUser(userName))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React from 'react';\n\nclass ChatMessage extends React.Component {\n\n    render() {\n        let { message } = this.props;\n\n        return (\n            <div className={ message.loggedInUser ? 'message-box message-box-right' : 'message-box message-box-left' }>\n                { message.loggedInUser ? null : <div className=\"user-name\">{message.user}</div> }\n                <div className={ message.loggedInUser ? 'chat-message chat-message-right' : 'chat-message chat-message-left' }>{message.message}</div>\n            </div>\n        )\n    };\n}\n\nexport default ChatMessage;","import React from 'react';\n\nconst Header = props  => {\n\n    return (\n        <header>\n            <h1>Chat App</h1>\n            { \n                props.isLogin ?\n                (<div className=\"options\">\n                    <span className=\"username\">{props.userName}</span>\n                    <button className=\"option-button\" onClick={props.onLogout}>Logout</button>\n                </div>) : null\n            }\n        </header>\n    )\n}\n\nexport default Header;","import React, { createRef } from 'react';\nimport { connect } from  'react-redux';\n\nimport ChatMessage from './ChatMessage';\n\nimport { addMessage, logoutUser } from '../redux/actions';\nimport Header from './Header';\n\nlet CHAT_API = \"wss://echo.websocket.org/\";\n\nclass Chat extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: \"\",\n            received : 0\n        };\n\n        this.connection = new WebSocket(CHAT_API);\n    }\n\n    componentDidMount() {\n        this.messagesEndRef = createRef(null);\n        this.scrollToBottom();\n\n        this.connection.onmessage = evt => {\n            let message = {\n                user: \"ChatBot\",\n                message: evt.data,\n                loggedInUser: false\n            };\n\n            this.props.sendMessage(message);\n            this.setState({\n                received : 1\n            });\n        };\n\n    }\n\n    onMessageChange = (e) => {\n        let text = e.target.value;\n\n        this.setState({\n            text\n        });\n    }\n\n    handleKeyPress = (event) => {\n        if(event.key === 'Enter'){\n          this.onSend();\n        }\n      }\n    \n    onSend = () => {\n        let { text } = this.state;\n\n        if (text.length > 0) {\n            let message = {\n                user: this.props.userName,\n                message: text,\n                loggedInUser: true\n            }; \n        this.props.sendMessage(message);\n        this.connection.send(text);\n\n        this.setState({\n            text : '',\n            received: 0\n        });\n        }\n    }\n\n    onLogout = () => {\n        this.props.history.push('/');\n        this.props.onLogoutUser();\n    }\n\n    scrollToBottom = () => {\n        if (this.messagesEndRef.current) {\n            this.messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\n        }\n    }\n    \n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    render() {\n        let { messages } = this.props;\n\n        return (\n            <React.Fragment>\n                <Header {...this.props} onLogout={this.onLogout}/>\n                <div className=\"chat-page\">\n                    <div className=\"chat-messages\">\n                    {\n                        messages.map((message, index) => {\n                            return (<ChatMessage key={index} message={message} />);\n                        })\n                    }\n                    <div ref={this.messagesEndRef} />\n                    </div>\n                    <div className=\"chat-box\">\n                        <input className=\"chat-text\" type=\"text\" value={this.state.text} placeholder=\"Type here..\" onKeyPress={this.handleKeyPress} onChange={this.onMessageChange}/>\n                        <button className=\"chat-button\" onClick={this.onSend}>Send</button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        messages: state.messages,\n        userName: state.userName,\n        isLogin: state.isLogin\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage(message) {\n            dispatch(addMessage(message));\n        },\n        onLogoutUser() {\n            dispatch(logoutUser())\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);","import React from 'react';\n\nfunction NotFound() {\n    return (\n        <div className=\"not-found\">\n            <h1>Not Found</h1>\n        </div>\n    );\n}\n\nexport default NotFound;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\nimport './App.css';\n\nimport Login from \"./components/Login\";\nimport Chat from \"./components/Chat\";\nimport NotFound from './components/NotFound';\n\nfunction App() {\n\n  return (\n    <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/chat\" component={Chat}/>\n          <Route component={NotFound} />\n        </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import {\n    LOGIN_USER,\n    LOGOUT_USER,\n    ADD_MESSAGE\n\n} from './actions';\n\nlet initState = {\n    isLogin: false,\n    messages: [],\n    userName: \"\"\n};\n\nconst reducer = (state = initState, action) => {\n    switch (action.type) {\n        case LOGIN_USER : {\n            let  { isLogin } = state;\n            isLogin = !isLogin;\n            let { userName } = action;\n            return Object.assign({}, state, { userName, isLogin });\n        }\n        case LOGOUT_USER : {\n            let  { isLogin, userName } = state;\n            isLogin = !isLogin;\n            userName = \"\";\n            return Object.assign({}, state, { userName, isLogin });\n        }\n        case ADD_MESSAGE: {\n            let  { messages } = state;\n            let { message } = action;\n            messages.push(message);\n            return Object.assign({}, state, { messages });\n        }\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import { createStore } from 'redux';\n\nimport setupReducer  from './reducers';\n\nconst store = createStore(setupReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\n\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}